import unittest
import cupy as cp
import numpy as np
import pytest

from mermake.fill import reflect


class TestReflectFunction(unittest.TestCase):
	
	@pytest.fixture
	def test_data_2d(self):
		arr = cp.array([
				[ 1.0, 2.0, 3.0, 4.0, 5.0],
				[ 6.0, 7.0, 8.0, 9.0,10.0],
				[11.0,12.0,13.0,14.0,15.0]
				], dtype=cp.float32)
		return arr
	
	def setUp(self):
		"""Set up test fixtures before each test method."""
		if not cp.cuda.is_available():
			self.skipTest("CUDA not available")
	
	def test_reflect_1d_mode_out(self):
		"""Test basic 1D reflection with mode='out' - reflects away from 0."""
		arr = cp.array([1.0, 2.0, 3.0, 4.0, 5.0], dtype=cp.float32)
		
		result = reflect(arr, i=2, axis=0, mode="out")
		
		self.assertIs(result, arr)
		expected = cp.array([1.0, 2.0, 3.0, 2.0, 1.0], dtype=cp.float32)
		cp.testing.assert_array_equal(arr, expected)
	
	def test_reflect_1d_mode_in(self):
		"""Test basic 1D reflection with mode='in' - reflects towards 0."""
		arr = cp.array([1.0, 2.0, 3.0, 4.0, 5.0], dtype=cp.float32)
		
		reflect(arr, i=2, axis=0, mode="in")
		
		expected = cp.array([5.0, 4.0, 3.0, 4.0, 5.0], dtype=cp.float32)
		cp.testing.assert_array_equal(arr, expected)
	
	
	def test_reflect_2d_mode_in(self):
		"""Test basic 2D reflection with mode='in' - reflects towards 0."""
	
		# test when the i is at the edge and nothing is reflected
		reflect(test_data_2d, i=2, axis=0, mode="in")
		expected = cp.array([
						[ 1.0, 2.0, 3.0, 4.0, 5.0],
						[ 6.0, 7.0, 8.0, 9.0,10.0],
						[11.0,12.0,13.0,14.0,15.0]
						], dtype=cp.float32)
		cp.testing.assert_array_equal(arr, expected)
		
		arr = test_data_2d()
		reflect(arr, i=1, axis=0, mode="in")
		expected = cp.array([
						[11.0,12.0,13.0,14.0,15.0],
						[ 6.0, 7.0, 8.0, 9.0,10.0],
						[11.0,12.0,13.0,14.0,15.0]
						], dtype=cp.float32)
		cp.testing.assert_array_equal(arr, expected)
	
		arr = test_data_2d()
		reflect(arr, i=2, axis=1, mode="in")
		expected = cp.array([
						[ 5.0, 4.0, 3.0, 4.0, 5.0],
						[10.0, 9.0, 8.0, 9.0,10.0],
						[15.0,14.0,13.0,14.0,15.0]
						], dtype=cp.float32)
		cp.testing.assert_array_equal(arr, expected)
	
		# this is a weird one, maybe I should extend the full 'in' with the last valid vectro repeated
		arr = test_data_2d()
		reflect(arr, i=3, axis=1, mode="in")
		expected = cp.array([
						[ 1.0, 2.0, 5.0, 4.0, 5.0],
						[ 6.0, 7.0,10.0, 9.0,10.0],
						[11.0,12.0,15.0,14.0,15.0]
						], dtype=cp.float32)
		cp.testing.assert_array_equal(arr, expected)

	def test_reflect_2d_mode_out(self):
		"""Test basic 1D reflection with mode='out' - reflects away from 0."""
	
		# test when the i is at the edge and nothing is reflected
		arr = test_data_2d()
		reflect(arr, i=0, axis=0, mode="out")
		expected = test_data_2d()
		cp.testing.assert_array_equal(arr, expected)

	def test_basic_functionality(self):
		"""Test that function runs without errors on various inputs."""
		# Just test that these don't crash
		arr1d = cp.array([1.0, 2.0, 3.0], dtype=cp.float32)
		reflect(arr1d, i=1, axis=0, mode="out")
		reflect(arr1d, i=1, axis=0, mode="in")
		
		arr2d = cp.random.random((4, 5)).astype(cp.float32)
		reflect(arr2d, i=2, axis=0, mode="out")
		reflect(arr2d, i=2, axis=1, mode="in")
		
		arr3d = cp.random.random((3, 4, 5)).astype(cp.float32)
		reflect(arr3d, i=1, axis=0, mode="out")
		reflect(arr3d, i=2, axis=1, mode="in")
		reflect(arr3d, i=1, axis=2, mode="out")
	
	def test_error_handling(self):
		"""Test error cases."""
		arr = cp.array([1.0, 2.0, 3.0], dtype=cp.float32)
		
		with self.assertRaises(IndexError):
			reflect(arr, i=5, axis=0)
		
		with self.assertRaises(ValueError):
			reflect(arr, i=1, mode="invalid")
		
		with self.assertRaises(IndexError):
			reflect(arr, i=1, axis=1)
		
		with self.assertRaises(IndexError):
			reflect(arr, i=3, axis=0)
	
	def test_default_parameters(self):
		"""Test default parameter values."""
		arr1 = cp.array([1.0, 2.0, 3.0, 4.0], dtype=cp.float32)
		arr2 = arr1.copy()
		
		reflect(arr1, i=1)
		reflect(arr2, i=1, axis=0, mode="out")
		
		cp.testing.assert_array_equal(arr1, arr2)

if __name__ == '__main__':
	unittest.main(verbosity=2)
